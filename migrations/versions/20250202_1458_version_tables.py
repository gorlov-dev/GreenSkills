"""version tables

Revision ID: 6b69de32ec8b
Revises: 0b2b106265f7
Create Date: 2025-02-02 14:58:44.277225

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "6b69de32ec8b"
down_revision = "0b2b106265f7"
branch_labels = None
depends_on = None


def upgrade():
    # –¢–∞–±–ª–∏—Ü—ã –≤–µ—Ä—Å–∏–π
    op.execute(
        """
        CREATE TABLE presentations_versions (
            id SERIAL PRIMARY KEY,
            presentation_id INT NOT NULL REFERENCES presentations(id) ON DELETE CASCADE,
            version INT NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
            changes JSONB NOT NULL
        );
    """
    )
    op.execute(
        """
        CREATE TABLE slides_versions (
            id SERIAL PRIMARY KEY,
            slide_id INT NOT NULL REFERENCES slides(id) ON DELETE CASCADE,
            version INT NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
            changes JSONB NOT NULL
        );
    """
    )

    # –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è JSON –æ–±—ä–µ–∫—Ç–æ–≤
    op.execute(
        """
        CREATE OR REPLACE FUNCTION base.jsonb_diff_recursive(left_jsonb JSONB, right_jsonb JSONB) RETURNS JSONB AS $$
        DECLARE
            result JSONB := '{}';
            key TEXT;
            value JSONB;
            left_value JSONB;
            diff JSONB;
        BEGIN
            -- –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –∏–∑ right_jsonb
            FOR key, value IN (SELECT k, v FROM jsonb_each(right_jsonb) AS x(k, v))
            LOOP
                -- –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ left_jsonb, —Ç–æ –±—É–¥–µ—Ç NULL
                left_value := left_jsonb->key;

                -- üîπ –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                IF jsonb_typeof(left_value) = 'array' AND jsonb_typeof(value) = 'array' THEN
                    -- –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã —Ä–∞–∑–Ω—ã–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π
                    IF left_value IS DISTINCT FROM value THEN
                        result := jsonb_set(result, ARRAY[key], value);
                    END IF;
                    CONTINUE;
                END IF;

                -- üîπ –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                IF jsonb_typeof(left_value) = 'object' AND jsonb_typeof(value) = 'object' THEN
                    diff := base.jsonb_diff_recursive(left_value, value);
                    IF diff IS NOT NULL AND diff <> '{}' THEN
                        result := jsonb_set(result, ARRAY[key], diff);
                    END IF;
                -- –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                ELSIF left_value IS DISTINCT FROM value THEN
                    result := jsonb_set(result, ARRAY[key], value);
                END IF;
            END LOOP;
            
            RETURN result;
        END;
        $$ LANGUAGE plpgsql;
    """
    )

    # –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    op.execute(
        """
        CREATE OR REPLACE FUNCTION base.track_presentation_changes()
        RETURNS TRIGGER AS $$
        DECLARE
            changes JSONB;
        BEGIN
            -- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ jsonb_diff_recursive —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NULL
            changes := COALESCE(base.jsonb_diff_recursive(
                jsonb_build_object(
                    'prompt', NEW.prompt,
                    'title', NEW.title
                ),
                jsonb_build_object(
                    'prompt', OLD.prompt,
                    'title', OLD.title
                )
            ), '{}'::jsonb);

            -- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            IF jsonb_typeof(changes) = 'object' 
            AND EXISTS (SELECT 1 FROM jsonb_object_keys(changes) LIMIT 1) THEN

                INSERT INTO presentations_versions (presentation_id, version, changes)
                VALUES (OLD.id, OLD.version, changes);

                -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ UPDATE, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
                IF TG_OP = 'UPDATE' THEN
                    UPDATE presentations SET version = OLD.version + 1 WHERE id = OLD.id;
                END IF;
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """
    )
    op.execute(
        """
        CREATE OR REPLACE FUNCTION base.track_slide_changes()
        RETURNS TRIGGER AS $$
        DECLARE
            changes JSONB;
        BEGIN
            -- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ jsonb_diff_recursive —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NULL
            changes := COALESCE(base.jsonb_diff_recursive(
                jsonb_build_object(
                    'prompt', NEW.prompt,
                    'data', NEW.data,
                    'position', NEW.position,
                    'template_id', NEW.template_id
                ),
                jsonb_build_object(
                    'prompt', OLD.prompt,
                    'data', OLD.data,
                    'position', OLD.position,
                    'template_id', OLD.template_id
                )
            ), '{}'::jsonb);

            -- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            IF jsonb_typeof(changes) = 'object' 
            AND EXISTS (SELECT 1 FROM jsonb_object_keys(changes) LIMIT 1) THEN

                INSERT INTO slides_versions (slide_id, version, changes)
                VALUES (OLD.id, OLD.version, changes);

                -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ UPDATE, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
                IF TG_OP = 'UPDATE' THEN
                    UPDATE slides SET version = OLD.version + 1 WHERE id = OLD.id;
                END IF;
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

    """
    )
    op.execute(
        """
        CREATE TRIGGER presentations_versioning
        AFTER UPDATE ON presentations
        FOR EACH ROW
        WHEN (OLD IS DISTINCT FROM NEW)
        EXECUTE FUNCTION base.track_presentation_changes(); 
            """
    )
    op.execute(
        """
        CREATE TRIGGER slides_versioning
        AFTER UPDATE ON slides
        FOR EACH ROW
        WHEN (OLD IS DISTINCT FROM NEW)
        EXECUTE FUNCTION base.track_slide_changes();
            """
    )


def downgrade():
    op.execute("DROP TRIGGER IF EXISTS presentations_versioning ON presentations;")
    op.execute("DROP TRIGGER IF EXISTS slides_versioning ON slides;")
    op.execute("DROP FUNCTION IF EXISTS base.track_presentation_changes;")
    op.execute("DROP FUNCTION IF EXISTS base.track_slide_changes;")
    op.execute("DROP FUNCTION IF EXISTS base.jsonb_diff_recursive;")
    op.execute("DROP TABLE IF EXISTS presentations_versions;")
    op.execute("DROP TABLE IF EXISTS slides_versions;")
